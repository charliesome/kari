#!/usr/bin/env perl

$custom_flags = shift;

sub compile_test {
	($what, $src, $switches) = @_;
	print "checking for $what... ";
	if(system "echo '$src' | cc -Werror -o /dev/null $switches $custom_flags -xc - 2>/dev/null") {
		print "no\n";
		0;
	} else {
		print "yes\n";
		1;
	}
};

sub eval_test {
	($what, $src) = @_;
	print "checking if $what... ";
	system "echo 'int main() { return (!($src)); }' | cc $custom_flags -Werror -o _tmp_binary -xc - 2>/dev/null";
	if(system "./_tmp_binary") {
		print "no\n";
		unlink "_tmp_binary";
		0;
	} else {
		print "yes\n";
		unlink "_tmp_binary";
		1;
	}
};
		

# check which floating type fits in a pointer on arch
if(eval_test "pointer size is the same as double size", "sizeof(void*) == sizeof(double)") {
	$floating_switch = "-DK_SIZEOF_DOUBLE_EQ_POINTER";
} elsif(eval_test "pointer size is the same as float size", "sizeof(void*) == sizeof(float)") {
	$floating_switch = "-DK_SIZEOF_FLOAT_EQ_POINTER";
} else {
	die "\n*** architecture seems alien, please file a bug at http://github.com/charliesome/kari\n";
}

# attempt to see if boehm is installed
compile_test "-lgc", "int main(){}", "-lgc" or die "\n*** libgc not found!\n";

# attempt to find gc.h
$inc_switch = "";
unless(compile_test "gc.h", "#include <gc.h>\n int main(){}") {
	for $prefix ("/usr/include", "/usr/include/gc", "/usr/local/include", "/usr/local/include/gc", "/opt/local/include", "/opt/local/include/gc") {
		if(compile_test "$prefix/gc.h", "#include <gc.h>\n int main(){}", "-I$prefix") {
			$inc_switch = "-I$prefix";
			last;
		}
	}
	die "\n*** gc.h not found in any of the paths searched!\n" unless $inc_switch;
}

open(MAKEFILE, ">Makefile");

print MAKEFILE "CFLAGS=-std=c99 -g -p -pg -pedantic -Wall -Wshadow -Wpointer-arith -Wcast-qual -Wextra -Werror -Wno-unused-parameter -Wno-unused-function -iquote inc/ $inc_switch $floating_switch $custom_flags\n";
print MAKEFILE <<'EOF';
all: libkari.a repl

release:
	@make clean
EOF
print MAKEFILE "	make all CFLAGS='-std=c99 -fomit-frame-pointer -O3 -pedantic -Wall -Wshadow -Wpointer-arith  -Wcast-qual -Wextra -Werror -Wno-unused-parameter -Wno-unused-function -iquote inc/ $inc_switch $floating_switch $custom_flags' \n";
print MAKEFILE <<'EOF';
clean:
	rm -f src/*.o
	rm -f src/lib/*.o
	rm -f repl/*.o
	rm -f repl/.*.inc
	rm -f libkari.a
	rm -f ikari
	find . | grep gmon.out | xargs rm -f

install: release
	cp ikari /usr/local/bin/ikari

repl: libkari.a repl/.startup.kari.inc repl/ikari.o
	$(CC) $(CFLAGS) -o ikari src/*.o src/*/*.o repl/*.o -lm -lgc

repl/%.o: repl/%.c inc/*.h

repl/.startup.kari.inc: repl/startup.kari
	perl -e 'shift; while(<>) { chomp; s/"/\\"/g; print "\""; print; print "\"\n"; }' < repl/startup.kari > repl/.startup.kari.inc

libkari.a:	src/context.o src/dict.o src/kari.o src/vec.o src/parser.o src/execute.o src/st.o \
			src/lib/math.o src/lib/system.o src/lib/control.o src/lib/comparison.o \
			src/lib/string.o src/lib/array.o src/lib/dict.o src/lib/io.o #src/lib/math_asm.o
	ar r libkari.a src/*.o src/lib/*.o 2> /dev/null

src/%.o: src/%.c inc/%.h

#src/lib/math_asm.o: src/lib/math_asm.asm
#	nasm -f macho64 -o src/lib/math_asm.o src/lib/math_asm.asm
EOF

close MAKEFILE;
